server.context-path=/cas
server.port=8443

cas.server.prefix=https://passport.sso.com:8443/cas
cas.tgc.secure=false
#开启识别json文件，默认false
cas.serviceRegistry.initFromJson=true
#允许退出后转发url
cas.logout.followServiceRedirects=true

#SSL配置
server.ssl.enabled=true
server.ssl.key-store=classpath:tomcat.keystore
server.ssl.key-store-password=123456
server.ssl.keyAlias=passport.sso.com

server.max-http-header-size=2097152
server.use-forward-headers=true
server.connection-timeout=20000
server.error.include-stacktrace=NEVER

server.tomcat.max-http-post-size=2097152
server.tomcat.basedir=build/tomcat
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.pattern=%t %a "%r" %s (%D ms)
server.tomcat.accesslog.suffix=.log
server.tomcat.max-threads=10
server.tomcat.port-header=X-Forwarded-Port
server.tomcat.protocol-header=X-Forwarded-Proto
server.tomcat.protocol-header-https-value=https
server.tomcat.remote-ip-header=X-FORWARDED-FOR
server.tomcat.uri-encoding=UTF-8

spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true

##
# CAS Cloud Bus Configuration
#
spring.cloud.bus.enabled=false

endpoints.enabled=false
endpoints.sensitive=true

endpoints.restart.enabled=false
endpoints.shutdown.enabled=false

management.security.enabled=true
management.security.roles=ACTUATOR,ADMIN
management.security.sessions=if_required
management.context-path=/status
management.add-application-context-header=false

security.basic.authorize-mode=role
security.basic.enabled=false
security.basic.path=/cas/status/**

##
# CAS Web Application Session Configuration
#
server.session.timeout=300
server.session.cookie.http-only=true
server.session.tracking-modes=COOKIE

##
# CAS Thymeleaf View Configuration
#
spring.thymeleaf.encoding=UTF-8
# 取消页面缓存
spring.thymeleaf.cache=false
spring.thymeleaf.mode=HTML
##
# CAS Log4j Configuration
#
# logging.config=file:/etc/cas/log4j2.xml
server.context-parameters.isLog4jAutoInitializationDisabled=true

##
# CAS AspectJ Configuration
#
spring.aop.auto=true
spring.aop.proxy-target-class=true

##
# CAS Authentication Credentials
#
# cas.authn.accept.users=casuser::Mellon
staticAuthentication=false

##Encode Database Authentication 开始
#cas.authn.jdbc.query[0].sql=select * from sys_user where username=?
#cas.authn.jdbc.query[0].fieldPassword=password
#cas.authn.jdbc.query[0].fieldExpired=expired
#cas.authn.jdbc.query[0].fieldDisabled=disabled
#cas.authn.jdbc.query[0].dialect=org.hibernate.dialect.MySQL5InnoDBDialect
#cas.authn.jdbc.query[0].driverClass=com.mysql.jdbc.Driver
#cas.authn.jdbc.query[0].url=jdbc:mysql://localhost:3306/test
#cas.authn.jdbc.query[0].user=root
#cas.authn.jdbc.query[0].password=123456
#cas.authn.jdbc.query[0].passwordEncoder.type=DEFAULT
#cas.authn.jdbc.query[0].passwordEncoder.characterEncoding=UTF-8
#cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm=MD5
##Encode Database Authentication 结束
#
##密码管理 开始
##允许内置密码管理
#cas.authn.pm.enabled=true
#cas.authn.pm.reset.from=${spring.mail.username}
##发送邮件标题
#cas.authn.pm.reset.subject=SSO DEMO PASSWORD RESET
##邮件内容，必须要有%s，因为会生成一个连接并且带了token，否则无法打开链接，当然这个链接也和cas.server.prefix有关系
#cas.authn.pm.reset.text=password reset url: %s
##token失效分钟数
#cas.authn.pm.reset.expirationMinutes=10
#cas.authn.pm.reset.emailAttribute=mail
##是否开启问题回答
#cas.authn.pm.reset.securityQuestionsEnabled=true
##新密码必须匹配表达式
#cas.authn.pm.policyPattern=\\d{3,10}
#
##发送邮件
#spring.mail.host=smtp.163.com
#spring.mail.port=
##邮箱用户名
#spring.mail.username=aion1002@163.com
##邮箱授权码
#spring.mail.password=aion10022
#spring.mail.testConnection=false
#spring.mail.properties.mail.smtp.auth=true
##必须ssl
#spring.mail.properties.mail.smtp.ssl.enable=true
#
##邮箱查找
##根据用户名查找问题
#cas.authn.pm.jdbc.sqlSecurityQuestions=select question, answer from sys_user_question where username=?
##根据用户名查找邮箱
#cas.authn.pm.jdbc.sqlFindEmail=select email from sys_user where username=?
#cas.authn.pm.jdbc.sqlChangePassword=update sys_user set password=? where username=?
#cas.authn.pm.jdbc.url=${cas.authn.jdbc.query[0].url}
#cas.authn.pm.jdbc.user=${cas.authn.jdbc.query[0].user}
#cas.authn.pm.jdbc.password=${cas.authn.jdbc.query[0].password}
#cas.authn.pm.jdbc.dialect=${cas.authn.jdbc.query[0].dialect}
#cas.authn.pm.jdbc.driverClass=${cas.authn.jdbc.query[0].driverClass}
#cas.authn.pm.jdbc.passwordEncoder.type=${cas.authn.jdbc.query[0].passwordEncoder.type}
#cas.authn.pm.jdbc.passwordEncoder.characterEncoding=${cas.authn.jdbc.query[0].passwordEncoder.characterEncoding}
#cas.authn.pm.jdbc.passwordEncoder.encodingAlgorithm=${cas.authn.jdbc.query[0].passwordEncoder.encodingAlgorithm}
#cas.authn.pm.jdbc.passwordEncoder.secret=${cas.authn.jdbc.query[0].passwordEncoder.secret}
#
##默认是false，不会提交update语句
#cas.authn.pm.jdbc.autocommit=true
##密码管理 结束
#
### 多属性返回开始
#
####单行
## key为数据库的列，value为输出属性的key
#cas.authn.attributeRepository.jdbc[0].attributes.email=email
#cas.authn.attributeRepository.jdbc[0].attributes.address=address
#cas.authn.attributeRepository.jdbc[0].attributes.age=age
#cas.authn.attributeRepository.jdbc[0].singleRow=true
#cas.authn.attributeRepository.jdbc[0].order=0
#cas.authn.attributeRepository.jdbc[0].url=${cas.authn.jdbc.query[0].url}
## 以下属性为查询sql时，当为多个时逗号分隔，如填写username、email,sql会变成 select * from sys_user where username=${?} {and/or} email=${?}
#cas.authn.attributeRepository.jdbc[0].username=username,email
#cas.authn.attributeRepository.jdbc[0].queryType=OR
#cas.authn.attributeRepository.jdbc[0].user=${cas.authn.jdbc.query[0].user}
#cas.authn.attributeRepository.jdbc[0].password=${cas.authn.jdbc.query[0].password}
#cas.authn.attributeRepository.jdbc[0].sql=select * from sys_user where {0}
#cas.authn.attributeRepository.jdbc[0].dialect=${cas.authn.jdbc.query[0].dialect}
#cas.authn.attributeRepository.jdbc[0].ddlAuto=none
#cas.authn.attributeRepository.jdbc[0].driverClass=${cas.authn.jdbc.query[0].driverClass}
#cas.authn.attributeRepository.jdbc[0].leakThreshold=10
#cas.authn.attributeRepository.jdbc[0].propagationBehaviorName=PROPAGATION_REQUIRED
#cas.authn.attributeRepository.jdbc[0].batchSize=1
#cas.authn.attributeRepository.jdbc[0].failFast=true
#
#
##多行
#cas.authn.attributeRepository.jdbc[1].attributes.group=group_multi
#cas.authn.attributeRepository.jdbc[1].attributes.school=school_multi
##键值对
#cas.authn.attributeRepository.jdbc[1].columnMappings.ATTR_KEY=ATTR_VAL
#cas.authn.attributeRepository.jdbc[1].singleRow=false
#cas.authn.attributeRepository.jdbc[1].order=1
#cas.authn.attributeRepository.jdbc[1].url=${cas.authn.jdbc.query[0].url}
#cas.authn.attributeRepository.jdbc[1].username=username
#cas.authn.attributeRepository.jdbc[1].user=${cas.authn.jdbc.query[0].user}
#cas.authn.attributeRepository.jdbc[1].password=${cas.authn.jdbc.query[0].password}
#cas.authn.attributeRepository.jdbc[1].sql=select * from sys_attrs where {0}
#cas.authn.attributeRepository.jdbc[1].dialect=${cas.authn.jdbc.query[0].dialect}
#cas.authn.attributeRepository.jdbc[1].ddlAuto=none
#cas.authn.attributeRepository.jdbc[1].driverClass=${cas.authn.jdbc.query[0].driverClass}
#cas.authn.attributeRepository.jdbc[1].leakThreshold=10
#cas.authn.attributeRepository.jdbc[1].propagationBehaviorName=PROPAGATION_REQUIRED
#cas.authn.attributeRepository.jdbc[1].batchSize=1
#cas.authn.attributeRepository.jdbc[1].failFast=true
### 多属性返回结束